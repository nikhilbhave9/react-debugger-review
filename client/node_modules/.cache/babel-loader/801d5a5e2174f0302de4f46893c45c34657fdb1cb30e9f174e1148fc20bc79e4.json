{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isObject = exports.pick = exports.assertNever = void 0;\n/**\n * Utility for enforcing exhaustiveness checks in the type system.\n *\n * @see https://basarat.gitbook.io/typescript/type-system/discriminated-unions#throw-in-exhaustive-checks\n *\n * @param value The variable with no remaining values\n */\nfunction assertNever(value) {\n  throw new Error(`Unexpected value should never occur: ${value}`);\n}\nexports.assertNever = assertNever;\nfunction pick(base, keys) {\n  const entries = keys.map(key => [key, base === null || base === void 0 ? void 0 : base[key]]);\n  return Object.fromEntries(entries);\n}\nexports.pick = pick;\nfunction isObject(o) {\n  return typeof o === \"object\" && o !== null;\n}\nexports.isObject = isObject;","map":{"version":3,"mappings":";;;;;;AAAA;;;;;;;AAOA,SAAgBA,WAAW,CAACC,KAAY;EACtC,MAAM,IAAIC,KAAK,CAAC,wCAAwCD,KAAK,EAAE,CAAC;AAClE;AAFAE;AAMA,SAAgBC,IAAI,CAClBC,IAAO,EACPC,IAAkB;EAElB,MAAMC,OAAO,GAAGD,IAAI,CAACE,GAAG,CAACC,GAAG,IAAI,CAACA,GAAG,EAAEJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAGI,GAAG,CAAC,CAAC,CAAC;EACnD,OAAOC,MAAM,CAACC,WAAW,CAACJ,OAAO,CAAC;AACpC;AANAJ;AAQA,SAAgBS,QAAQ,CAACC,CAAU;EACjC,OAAO,OAAOA,CAAC,KAAK,QAAQ,IAAIA,CAAC,KAAK,IAAI;AAC5C;AAFAV","names":["assertNever","value","Error","exports","pick","base","keys","entries","map","key","Object","fromEntries","isObject","o"],"sources":["/home/nikhilbhave9/reactdevtools/web-bug-log/node_modules/@notionhq/client/src/helpers.ts"],"sourcesContent":["/**\n * Utility for enforcing exhaustiveness checks in the type system.\n *\n * @see https://basarat.gitbook.io/typescript/type-system/discriminated-unions#throw-in-exhaustive-checks\n *\n * @param value The variable with no remaining values\n */\nexport function assertNever(value: never): never {\n  throw new Error(`Unexpected value should never occur: ${value}`)\n}\n\ntype AllKeys<T> = T extends unknown ? keyof T : never\n\nexport function pick<O extends unknown, K extends AllKeys<O>>(\n  base: O,\n  keys: readonly K[]\n): Pick<O, K> {\n  const entries = keys.map(key => [key, base?.[key]])\n  return Object.fromEntries(entries)\n}\n\nexport function isObject(o: unknown): o is Record<PropertyKey, unknown> {\n  return typeof o === \"object\" && o !== null\n}\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}