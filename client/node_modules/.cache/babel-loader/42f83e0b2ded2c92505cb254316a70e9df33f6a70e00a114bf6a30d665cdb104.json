{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Client_auth, _Client_logLevel, _Client_logger, _Client_prefixUrl, _Client_timeoutMs, _Client_notionVersion, _Client_fetch, _Client_agent, _Client_userAgent;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst logging_1 = require(\"./logging\");\nconst errors_1 = require(\"./errors\");\nconst helpers_1 = require(\"./helpers\");\nconst api_endpoints_1 = require(\"./api-endpoints\");\nconst node_fetch_1 = require(\"node-fetch\");\nconst package_json_1 = require(\"../package.json\");\nclass Client {\n  constructor(options) {\n    var _a, _b, _c, _d, _e, _f;\n    _Client_auth.set(this, void 0);\n    _Client_logLevel.set(this, void 0);\n    _Client_logger.set(this, void 0);\n    _Client_prefixUrl.set(this, void 0);\n    _Client_timeoutMs.set(this, void 0);\n    _Client_notionVersion.set(this, void 0);\n    _Client_fetch.set(this, void 0);\n    _Client_agent.set(this, void 0);\n    _Client_userAgent.set(this, void 0);\n    /*\n     * Notion API endpoints\n     */\n    this.blocks = {\n      /**\n       * Retrieve block\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.getBlock.path(args),\n          method: api_endpoints_1.getBlock.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.getBlock.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.getBlock.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Update block\n       */\n      update: args => {\n        return this.request({\n          path: api_endpoints_1.updateBlock.path(args),\n          method: api_endpoints_1.updateBlock.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.updateBlock.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.updateBlock.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Delete block\n       */\n      delete: args => {\n        return this.request({\n          path: api_endpoints_1.deleteBlock.path(args),\n          method: api_endpoints_1.deleteBlock.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.deleteBlock.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.deleteBlock.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      children: {\n        /**\n         * Append block children\n         */\n        append: args => {\n          return this.request({\n            path: api_endpoints_1.appendBlockChildren.path(args),\n            method: api_endpoints_1.appendBlockChildren.method,\n            query: (0, helpers_1.pick)(args, api_endpoints_1.appendBlockChildren.queryParams),\n            body: (0, helpers_1.pick)(args, api_endpoints_1.appendBlockChildren.bodyParams),\n            auth: args === null || args === void 0 ? void 0 : args.auth\n          });\n        },\n        /**\n         * Retrieve block children\n         */\n        list: args => {\n          return this.request({\n            path: api_endpoints_1.listBlockChildren.path(args),\n            method: api_endpoints_1.listBlockChildren.method,\n            query: (0, helpers_1.pick)(args, api_endpoints_1.listBlockChildren.queryParams),\n            body: (0, helpers_1.pick)(args, api_endpoints_1.listBlockChildren.bodyParams),\n            auth: args === null || args === void 0 ? void 0 : args.auth\n          });\n        }\n      }\n    };\n    this.databases = {\n      /**\n       * List databases\n       *\n       * @deprecated Please use `search`\n       */\n      list: args => {\n        return this.request({\n          path: api_endpoints_1.listDatabases.path(),\n          method: api_endpoints_1.listDatabases.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.listDatabases.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.listDatabases.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Retrieve a database\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.getDatabase.path(args),\n          method: api_endpoints_1.getDatabase.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.getDatabase.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.getDatabase.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Query a database\n       */\n      query: args => {\n        return this.request({\n          path: api_endpoints_1.queryDatabase.path(args),\n          method: api_endpoints_1.queryDatabase.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.queryDatabase.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.queryDatabase.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Create a database\n       */\n      create: args => {\n        return this.request({\n          path: api_endpoints_1.createDatabase.path(),\n          method: api_endpoints_1.createDatabase.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.createDatabase.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.createDatabase.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Update a database\n       */\n      update: args => {\n        return this.request({\n          path: api_endpoints_1.updateDatabase.path(args),\n          method: api_endpoints_1.updateDatabase.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.updateDatabase.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.updateDatabase.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      }\n    };\n    this.pages = {\n      /**\n       * Create a page\n       */\n      create: args => {\n        return this.request({\n          path: api_endpoints_1.createPage.path(),\n          method: api_endpoints_1.createPage.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.createPage.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.createPage.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Retrieve a page\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.getPage.path(args),\n          method: api_endpoints_1.getPage.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.getPage.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.getPage.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Update page properties\n       */\n      update: args => {\n        return this.request({\n          path: api_endpoints_1.updatePage.path(args),\n          method: api_endpoints_1.updatePage.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.updatePage.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.updatePage.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      properties: {\n        /**\n         * Retrieve page property\n         */\n        retrieve: args => {\n          return this.request({\n            path: api_endpoints_1.getPageProperty.path(args),\n            method: api_endpoints_1.getPageProperty.method,\n            query: (0, helpers_1.pick)(args, api_endpoints_1.getPageProperty.queryParams),\n            body: (0, helpers_1.pick)(args, api_endpoints_1.getPageProperty.bodyParams),\n            auth: args === null || args === void 0 ? void 0 : args.auth\n          });\n        }\n      }\n    };\n    this.users = {\n      /**\n       * Retrieve a user\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.getUser.path(args),\n          method: api_endpoints_1.getUser.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.getUser.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.getUser.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * List all users\n       */\n      list: args => {\n        return this.request({\n          path: api_endpoints_1.listUsers.path(),\n          method: api_endpoints_1.listUsers.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.listUsers.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.listUsers.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Get details about bot\n       */\n      me: args => {\n        return this.request({\n          path: api_endpoints_1.getSelf.path(),\n          method: api_endpoints_1.getSelf.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.getSelf.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.getSelf.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      }\n    };\n    __classPrivateFieldSet(this, _Client_auth, options === null || options === void 0 ? void 0 : options.auth, \"f\");\n    __classPrivateFieldSet(this, _Client_logLevel, (_a = options === null || options === void 0 ? void 0 : options.logLevel) !== null && _a !== void 0 ? _a : logging_1.LogLevel.WARN, \"f\");\n    __classPrivateFieldSet(this, _Client_logger, (_b = options === null || options === void 0 ? void 0 : options.logger) !== null && _b !== void 0 ? _b : (0, logging_1.makeConsoleLogger)(package_json_1.name), \"f\");\n    __classPrivateFieldSet(this, _Client_prefixUrl, ((_c = options === null || options === void 0 ? void 0 : options.baseUrl) !== null && _c !== void 0 ? _c : \"https://api.notion.com\") + \"/v1/\", \"f\");\n    __classPrivateFieldSet(this, _Client_timeoutMs, (_d = options === null || options === void 0 ? void 0 : options.timeoutMs) !== null && _d !== void 0 ? _d : 60000, \"f\");\n    __classPrivateFieldSet(this, _Client_notionVersion, (_e = options === null || options === void 0 ? void 0 : options.notionVersion) !== null && _e !== void 0 ? _e : Client.defaultNotionVersion, \"f\");\n    __classPrivateFieldSet(this, _Client_fetch, (_f = options === null || options === void 0 ? void 0 : options.fetch) !== null && _f !== void 0 ? _f : node_fetch_1.default, \"f\");\n    __classPrivateFieldSet(this, _Client_agent, options === null || options === void 0 ? void 0 : options.agent, \"f\");\n    __classPrivateFieldSet(this, _Client_userAgent, `notionhq-client/${package_json_1.version}`, \"f\");\n  }\n  /**\n   * Sends a request.\n   *\n   * @param path\n   * @param method\n   * @param query\n   * @param body\n   * @returns\n   */\n  async request(_ref) {\n    let {\n      path,\n      method,\n      query,\n      body,\n      auth\n    } = _ref;\n    this.log(logging_1.LogLevel.INFO, \"request start\", {\n      method,\n      path\n    });\n    // If the body is empty, don't send the body in the HTTP request\n    const bodyAsJsonString = !body || Object.entries(body).length === 0 ? undefined : JSON.stringify(body);\n    const url = new URL(`${__classPrivateFieldGet(this, _Client_prefixUrl, \"f\")}${path}`);\n    if (query) {\n      for (const [key, value] of Object.entries(query)) {\n        if (value !== undefined) {\n          url.searchParams.append(key, String(value));\n        }\n      }\n    }\n    const headers = {\n      ...this.authAsHeaders(auth),\n      \"Notion-Version\": __classPrivateFieldGet(this, _Client_notionVersion, \"f\"),\n      \"user-agent\": __classPrivateFieldGet(this, _Client_userAgent, \"f\")\n    };\n    if (bodyAsJsonString !== undefined) {\n      headers[\"content-type\"] = \"application/json\";\n    }\n    try {\n      const response = await errors_1.RequestTimeoutError.rejectAfterTimeout(__classPrivateFieldGet(this, _Client_fetch, \"f\").call(this, url.toString(), {\n        method,\n        headers,\n        body: bodyAsJsonString,\n        agent: __classPrivateFieldGet(this, _Client_agent, \"f\")\n      }), __classPrivateFieldGet(this, _Client_timeoutMs, \"f\"));\n      const responseText = await response.text();\n      if (!response.ok) {\n        throw (0, errors_1.buildRequestError)(response, responseText);\n      }\n      const responseJson = JSON.parse(responseText);\n      this.log(logging_1.LogLevel.INFO, `request success`, {\n        method,\n        path\n      });\n      return responseJson;\n    } catch (error) {\n      if (!(0, errors_1.isNotionClientError)(error)) {\n        throw error;\n      }\n      // Log the error if it's one of our known error types\n      this.log(logging_1.LogLevel.WARN, `request fail`, {\n        code: error.code,\n        message: error.message\n      });\n      if ((0, errors_1.isHTTPResponseError)(error)) {\n        // The response body may contain sensitive information so it is logged separately at the DEBUG level\n        this.log(logging_1.LogLevel.DEBUG, `failed response body`, {\n          body: error.body\n        });\n      }\n      throw error;\n    }\n  }\n  /**\n   * Search\n   */\n  search(args) {\n    return this.request({\n      path: api_endpoints_1.search.path(),\n      method: api_endpoints_1.search.method,\n      query: (0, helpers_1.pick)(args, api_endpoints_1.search.queryParams),\n      body: (0, helpers_1.pick)(args, api_endpoints_1.search.bodyParams),\n      auth: args === null || args === void 0 ? void 0 : args.auth\n    });\n  }\n  /**\n   * Emits a log message to the console.\n   *\n   * @param level The level for this message\n   * @param args Arguments to send to the console\n   */\n  log(level, message, extraInfo) {\n    if ((0, logging_1.logLevelSeverity)(level) >= (0, logging_1.logLevelSeverity)(__classPrivateFieldGet(this, _Client_logLevel, \"f\"))) {\n      __classPrivateFieldGet(this, _Client_logger, \"f\").call(this, level, message, extraInfo);\n    }\n  }\n  /**\n   * Transforms an API key or access token into a headers object suitable for an HTTP request.\n   *\n   * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n   * an empty object\n   *\n   * @param auth API key or access token\n   * @returns headers key-value object\n   */\n  authAsHeaders(auth) {\n    const headers = {};\n    const authHeaderValue = auth !== null && auth !== void 0 ? auth : __classPrivateFieldGet(this, _Client_auth, \"f\");\n    if (authHeaderValue !== undefined) {\n      headers[\"authorization\"] = `Bearer ${authHeaderValue}`;\n    }\n    return headers;\n  }\n}\nexports.default = Client;\n_Client_auth = new WeakMap(), _Client_logLevel = new WeakMap(), _Client_logger = new WeakMap(), _Client_prefixUrl = new WeakMap(), _Client_timeoutMs = new WeakMap(), _Client_notionVersion = new WeakMap(), _Client_fetch = new WeakMap(), _Client_agent = new WeakMap(), _Client_userAgent = new WeakMap();\nClient.defaultNotionVersion = \"2022-02-22\";","map":{"version":3,"mappings":"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","names":["Client","constructor","options","_Client_auth","_Client_logLevel","_Client_logger","_Client_prefixUrl","_Client_timeoutMs","_Client_notionVersion","_Client_fetch","_Client_agent","_Client_userAgent","retrieve","args","request","path","api_endpoints_1","method","query","queryParams","body","bodyParams","auth","update","delete","children","append","list","create","properties","me","__classPrivateFieldSet","logLevel","logging_1","WARN","logger","package_json_1","baseUrl","timeoutMs","notionVersion","defaultNotionVersion","fetch","node_fetch_1","agent","log","INFO","bodyAsJsonString","Object","entries","length","undefined","JSON","stringify","url","URL","__classPrivateFieldGet","key","value","searchParams","String","headers","authAsHeaders","response","errors_1","rejectAfterTimeout","toString","responseText","text","ok","responseJson","parse","error","code","message","DEBUG","search","level","extraInfo","authHeaderValue","exports"],"sources":["/home/nikhilbhave9/reactdevtools/web-bug-log/node_modules/@notionhq/client/src/Client.ts"],"sourcesContent":["import type { Agent } from \"http\"\nimport {\n  Logger,\n  LogLevel,\n  logLevelSeverity,\n  makeConsoleLogger,\n} from \"./logging\"\nimport {\n  buildRequestError,\n  isHTTPResponseError,\n  isNotionClientError,\n  RequestTimeoutError,\n} from \"./errors\"\nimport { pick } from \"./helpers\"\nimport {\n  GetBlockParameters,\n  GetBlockResponse,\n  getBlock,\n  UpdateBlockParameters,\n  UpdateBlockResponse,\n  updateBlock,\n  DeleteBlockParameters,\n  DeleteBlockResponse,\n  deleteBlock,\n  AppendBlockChildrenParameters,\n  AppendBlockChildrenResponse,\n  appendBlockChildren,\n  ListBlockChildrenParameters,\n  ListBlockChildrenResponse,\n  listBlockChildren,\n  ListDatabasesParameters,\n  ListDatabasesResponse,\n  listDatabases,\n  GetDatabaseParameters,\n  GetDatabaseResponse,\n  getDatabase,\n  QueryDatabaseParameters,\n  QueryDatabaseResponse,\n  queryDatabase,\n  CreateDatabaseParameters,\n  CreateDatabaseResponse,\n  createDatabase,\n  UpdateDatabaseParameters,\n  UpdateDatabaseResponse,\n  updateDatabase,\n  CreatePageParameters,\n  CreatePageResponse,\n  createPage,\n  GetPageParameters,\n  GetPageResponse,\n  getPage,\n  UpdatePageParameters,\n  UpdatePageResponse,\n  updatePage,\n  GetUserParameters,\n  GetUserResponse,\n  getUser,\n  ListUsersParameters,\n  ListUsersResponse,\n  listUsers,\n  SearchParameters,\n  SearchResponse,\n  search,\n  GetSelfParameters,\n  GetSelfResponse,\n  getSelf,\n  GetPagePropertyParameters,\n  GetPagePropertyResponse,\n  getPageProperty,\n} from \"./api-endpoints\"\nimport nodeFetch from \"node-fetch\"\nimport {\n  version as PACKAGE_VERSION,\n  name as PACKAGE_NAME,\n} from \"../package.json\"\nimport { SupportedFetch } from \"./fetch-types\"\n\nexport interface ClientOptions {\n  auth?: string\n  timeoutMs?: number\n  baseUrl?: string\n  logLevel?: LogLevel\n  logger?: Logger\n  notionVersion?: string\n  fetch?: SupportedFetch\n  /** Silently ignored in the browser */\n  agent?: Agent\n}\n\nexport interface RequestParameters {\n  path: string\n  method: Method\n  query?: QueryParams\n  body?: Record<string, unknown>\n  auth?: string\n}\n\nexport default class Client {\n  #auth?: string\n  #logLevel: LogLevel\n  #logger: Logger\n  #prefixUrl: string\n  #timeoutMs: number\n  #notionVersion: string\n  #fetch: SupportedFetch\n  #agent: Agent | undefined\n  #userAgent: string\n\n  static readonly defaultNotionVersion = \"2022-02-22\"\n\n  public constructor(options?: ClientOptions) {\n    this.#auth = options?.auth\n    this.#logLevel = options?.logLevel ?? LogLevel.WARN\n    this.#logger = options?.logger ?? makeConsoleLogger(PACKAGE_NAME)\n    this.#prefixUrl = (options?.baseUrl ?? \"https://api.notion.com\") + \"/v1/\"\n    this.#timeoutMs = options?.timeoutMs ?? 60_000\n    this.#notionVersion = options?.notionVersion ?? Client.defaultNotionVersion\n    this.#fetch = options?.fetch ?? nodeFetch\n    this.#agent = options?.agent\n    this.#userAgent = `notionhq-client/${PACKAGE_VERSION}`\n  }\n\n  /**\n   * Sends a request.\n   *\n   * @param path\n   * @param method\n   * @param query\n   * @param body\n   * @returns\n   */\n  public async request<ResponseBody>({\n    path,\n    method,\n    query,\n    body,\n    auth,\n  }: RequestParameters): Promise<ResponseBody> {\n    this.log(LogLevel.INFO, \"request start\", { method, path })\n\n    // If the body is empty, don't send the body in the HTTP request\n    const bodyAsJsonString =\n      !body || Object.entries(body).length === 0\n        ? undefined\n        : JSON.stringify(body)\n\n    const url = new URL(`${this.#prefixUrl}${path}`)\n    if (query) {\n      for (const [key, value] of Object.entries(query)) {\n        if (value !== undefined) {\n          url.searchParams.append(key, String(value))\n        }\n      }\n    }\n\n    const headers: Record<string, string> = {\n      ...this.authAsHeaders(auth),\n      \"Notion-Version\": this.#notionVersion,\n      \"user-agent\": this.#userAgent,\n    }\n\n    if (bodyAsJsonString !== undefined) {\n      headers[\"content-type\"] = \"application/json\"\n    }\n    try {\n      const response = await RequestTimeoutError.rejectAfterTimeout(\n        this.#fetch(url.toString(), {\n          method,\n          headers,\n          body: bodyAsJsonString,\n          agent: this.#agent,\n        }),\n        this.#timeoutMs\n      )\n\n      const responseText = await response.text()\n      if (!response.ok) {\n        throw buildRequestError(response, responseText)\n      }\n\n      const responseJson: ResponseBody = JSON.parse(responseText)\n      this.log(LogLevel.INFO, `request success`, { method, path })\n      return responseJson\n    } catch (error: unknown) {\n      if (!isNotionClientError(error)) {\n        throw error\n      }\n\n      // Log the error if it's one of our known error types\n      this.log(LogLevel.WARN, `request fail`, {\n        code: error.code,\n        message: error.message,\n      })\n\n      if (isHTTPResponseError(error)) {\n        // The response body may contain sensitive information so it is logged separately at the DEBUG level\n        this.log(LogLevel.DEBUG, `failed response body`, {\n          body: error.body,\n        })\n      }\n\n      throw error\n    }\n  }\n\n  /*\n   * Notion API endpoints\n   */\n\n  public readonly blocks = {\n    /**\n     * Retrieve block\n     */\n    retrieve: (\n      args: WithAuth<GetBlockParameters>\n    ): Promise<GetBlockResponse> => {\n      return this.request<GetBlockResponse>({\n        path: getBlock.path(args),\n        method: getBlock.method,\n        query: pick(args, getBlock.queryParams),\n        body: pick(args, getBlock.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Update block\n     */\n    update: (\n      args: WithAuth<UpdateBlockParameters>\n    ): Promise<UpdateBlockResponse> => {\n      return this.request<UpdateBlockResponse>({\n        path: updateBlock.path(args),\n        method: updateBlock.method,\n        query: pick(args, updateBlock.queryParams),\n        body: pick(args, updateBlock.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Delete block\n     */\n    delete: (\n      args: WithAuth<DeleteBlockParameters>\n    ): Promise<DeleteBlockResponse> => {\n      return this.request<DeleteBlockResponse>({\n        path: deleteBlock.path(args),\n        method: deleteBlock.method,\n        query: pick(args, deleteBlock.queryParams),\n        body: pick(args, deleteBlock.bodyParams),\n        auth: args?.auth,\n      })\n    },\n    children: {\n      /**\n       * Append block children\n       */\n      append: (\n        args: WithAuth<AppendBlockChildrenParameters>\n      ): Promise<AppendBlockChildrenResponse> => {\n        return this.request<AppendBlockChildrenResponse>({\n          path: appendBlockChildren.path(args),\n          method: appendBlockChildren.method,\n          query: pick(args, appendBlockChildren.queryParams),\n          body: pick(args, appendBlockChildren.bodyParams),\n          auth: args?.auth,\n        })\n      },\n\n      /**\n       * Retrieve block children\n       */\n      list: (\n        args: WithAuth<ListBlockChildrenParameters>\n      ): Promise<ListBlockChildrenResponse> => {\n        return this.request<ListBlockChildrenResponse>({\n          path: listBlockChildren.path(args),\n          method: listBlockChildren.method,\n          query: pick(args, listBlockChildren.queryParams),\n          body: pick(args, listBlockChildren.bodyParams),\n          auth: args?.auth,\n        })\n      },\n    },\n  }\n\n  public readonly databases = {\n    /**\n     * List databases\n     *\n     * @deprecated Please use `search`\n     */\n    list: (\n      args: WithAuth<ListDatabasesParameters>\n    ): Promise<ListDatabasesResponse> => {\n      return this.request<ListDatabasesResponse>({\n        path: listDatabases.path(),\n        method: listDatabases.method,\n        query: pick(args, listDatabases.queryParams),\n        body: pick(args, listDatabases.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Retrieve a database\n     */\n    retrieve: (\n      args: WithAuth<GetDatabaseParameters>\n    ): Promise<GetDatabaseResponse> => {\n      return this.request<GetDatabaseResponse>({\n        path: getDatabase.path(args),\n        method: getDatabase.method,\n        query: pick(args, getDatabase.queryParams),\n        body: pick(args, getDatabase.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Query a database\n     */\n    query: (\n      args: WithAuth<QueryDatabaseParameters>\n    ): Promise<QueryDatabaseResponse> => {\n      return this.request<QueryDatabaseResponse>({\n        path: queryDatabase.path(args),\n        method: queryDatabase.method,\n        query: pick(args, queryDatabase.queryParams),\n        body: pick(args, queryDatabase.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Create a database\n     */\n    create: (\n      args: WithAuth<CreateDatabaseParameters>\n    ): Promise<CreateDatabaseResponse> => {\n      return this.request<CreateDatabaseResponse>({\n        path: createDatabase.path(),\n        method: createDatabase.method,\n        query: pick(args, createDatabase.queryParams),\n        body: pick(args, createDatabase.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Update a database\n     */\n    update: (\n      args: WithAuth<UpdateDatabaseParameters>\n    ): Promise<UpdateDatabaseResponse> => {\n      return this.request<UpdateDatabaseResponse>({\n        path: updateDatabase.path(args),\n        method: updateDatabase.method,\n        query: pick(args, updateDatabase.queryParams),\n        body: pick(args, updateDatabase.bodyParams),\n        auth: args?.auth,\n      })\n    },\n  }\n\n  public readonly pages = {\n    /**\n     * Create a page\n     */\n    create: (\n      args: WithAuth<CreatePageParameters>\n    ): Promise<CreatePageResponse> => {\n      return this.request<CreatePageResponse>({\n        path: createPage.path(),\n        method: createPage.method,\n        query: pick(args, createPage.queryParams),\n        body: pick(args, createPage.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Retrieve a page\n     */\n    retrieve: (args: WithAuth<GetPageParameters>): Promise<GetPageResponse> => {\n      return this.request<GetPageResponse>({\n        path: getPage.path(args),\n        method: getPage.method,\n        query: pick(args, getPage.queryParams),\n        body: pick(args, getPage.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Update page properties\n     */\n    update: (\n      args: WithAuth<UpdatePageParameters>\n    ): Promise<UpdatePageResponse> => {\n      return this.request<UpdatePageResponse>({\n        path: updatePage.path(args),\n        method: updatePage.method,\n        query: pick(args, updatePage.queryParams),\n        body: pick(args, updatePage.bodyParams),\n        auth: args?.auth,\n      })\n    },\n    properties: {\n      /**\n       * Retrieve page property\n       */\n      retrieve: (\n        args: WithAuth<GetPagePropertyParameters>\n      ): Promise<GetPagePropertyResponse> => {\n        return this.request<GetPagePropertyResponse>({\n          path: getPageProperty.path(args),\n          method: getPageProperty.method,\n          query: pick(args, getPageProperty.queryParams),\n          body: pick(args, getPageProperty.bodyParams),\n          auth: args?.auth,\n        })\n      },\n    },\n  }\n\n  public readonly users = {\n    /**\n     * Retrieve a user\n     */\n    retrieve: (args: WithAuth<GetUserParameters>): Promise<GetUserResponse> => {\n      return this.request<GetUserResponse>({\n        path: getUser.path(args),\n        method: getUser.method,\n        query: pick(args, getUser.queryParams),\n        body: pick(args, getUser.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * List all users\n     */\n    list: (args: WithAuth<ListUsersParameters>): Promise<ListUsersResponse> => {\n      return this.request<ListUsersResponse>({\n        path: listUsers.path(),\n        method: listUsers.method,\n        query: pick(args, listUsers.queryParams),\n        body: pick(args, listUsers.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Get details about bot\n     */\n    me: (args: WithAuth<GetSelfParameters>): Promise<GetSelfResponse> => {\n      return this.request<GetSelfResponse>({\n        path: getSelf.path(),\n        method: getSelf.method,\n        query: pick(args, getSelf.queryParams),\n        body: pick(args, getSelf.bodyParams),\n        auth: args?.auth,\n      })\n    },\n  }\n\n  /**\n   * Search\n   */\n  public search(args: WithAuth<SearchParameters>): Promise<SearchResponse> {\n    return this.request<SearchResponse>({\n      path: search.path(),\n      method: search.method,\n      query: pick(args, search.queryParams),\n      body: pick(args, search.bodyParams),\n      auth: args?.auth,\n    })\n  }\n\n  /**\n   * Emits a log message to the console.\n   *\n   * @param level The level for this message\n   * @param args Arguments to send to the console\n   */\n  private log(\n    level: LogLevel,\n    message: string,\n    extraInfo: Record<string, unknown>\n  ) {\n    if (logLevelSeverity(level) >= logLevelSeverity(this.#logLevel)) {\n      this.#logger(level, message, extraInfo)\n    }\n  }\n\n  /**\n   * Transforms an API key or access token into a headers object suitable for an HTTP request.\n   *\n   * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n   * an empty object\n   *\n   * @param auth API key or access token\n   * @returns headers key-value object\n   */\n  private authAsHeaders(auth?: string): Record<string, string> {\n    const headers: Record<string, string> = {}\n    const authHeaderValue = auth ?? this.#auth\n    if (authHeaderValue !== undefined) {\n      headers[\"authorization\"] = `Bearer ${authHeaderValue}`\n    }\n    return headers\n  }\n}\n\n/*\n * Type aliases to support the generic request interface.\n */\ntype Method = \"get\" | \"post\" | \"patch\" | \"delete\"\ntype QueryParams = Record<string, string | number> | URLSearchParams\n\ntype WithAuth<P> = P & { auth?: string }\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}